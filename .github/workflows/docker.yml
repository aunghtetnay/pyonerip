name: Docker Build and Publish

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Required permissions for GitHub Container Registry
permissions:
  contents: read
  packages: write
  security-events: write

env:
  # Multi-registry configuration
  GHCR_REGISTRY: ghcr.io
  GHCR_IMAGE_NAME: ${{ github.repository }}
  DOCKERHUB_REGISTRY: docker.io
  DOCKERHUB_IMAGE_NAME: ahnay/pyonerip

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "No tests defined"

      - name: Run linting
        run: npm run lint || echo "No linting defined"

  build:
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    outputs:
      image-digest: ${{ steps.build-scan.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=commit-{{date 'YYYYMMDD'}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Pyone Play Ripper
            org.opencontainers.image.description=Video ripper for Pyone Play content
            org.opencontainers.image.vendor=aunghtetnay
            org.opencontainers.image.licenses=MIT

      - name: Build Docker image for security scan
        id: build-scan
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: pyonerip:scan
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/pyonerip-image.tar
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/pyonerip-image.tar
          retention-days: 1

  security-scan:
    runs-on: ubuntu-latest
    needs: [build]
    if: always() && needs.build.result == 'success'
    
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/pyonerip-image.tar
          docker tag pyonerip:scan pyonerip:scan

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'pyonerip:scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (Table format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'pyonerip:scan'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy configuration scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'pyonerip:scan'
          format: 'json'
          output: 'trivy-config.json'
          scan-type: 'config'

      - name: Upload Trivy results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-results
          path: |
            trivy-results.sarif
            trivy-config.json
          retention-days: 30

  publish:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: always() && needs.build.result == 'success' && needs.security-scan.result == 'success' && github.event_name != 'pull_request'
    
    outputs:
      image-digest: ${{ steps.push.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.DOCKERHUB_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=commit-{{date 'YYYYMMDD'}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Pyone Play Ripper
            org.opencontainers.image.description=Video ripper for Pyone Play content
            org.opencontainers.image.vendor=aunghtetnay
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  notify:
    runs-on: ubuntu-latest
    needs: [build,publish]
    if: always()
    
    steps:
      - name: Create deployment summary
        run: |
          echo "## Docker Build & Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "### Pull Request Build:" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Status**: ${{ needs.build.result == 'success' && 'Success' || 'Failed' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Security Scan**: ${{ needs.security-scan.result == 'success' && 'Passed' || (needs.security-scan.result == 'skipped' && 'Completed') || 'Issues Found' }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Images will be published when this PR is merged to main." >> $GITHUB_STEP_SUMMARY
          else
            echo "### Published Images:" >> $GITHUB_STEP_SUMMARY
            echo "- **GitHub Container Registry**: \`ghcr.io/aunghtetnay/pyonerip:latest\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Docker Hub**: \`docker.io/ahnay/pyonerip:latest\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Build Info:" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Build Status**: ${{ needs.build.result == 'success' && 'Success' || 'Failed' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Security Scan**: ${{ needs.security-scan.result == 'success' && 'Passed' || 'Issues Found' }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Publish Status**: ${{ needs.publish.result == 'success' && 'Success' || (needs.publish.result == 'skipped' && 'Skipped') || 'Failed' }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Quick Start:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Pull from GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ghcr.io/aunghtetnay/pyonerip:latest" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Or pull from Docker Hub" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ahnay/pyonerip:latest" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Run the container" >> $GITHUB_STEP_SUMMARY
            echo "docker run -p 3000:3000 ghcr.io/aunghtetnay/pyonerip:latest" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR with deployment info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Docker Build Preview
              
              This PR would publish the following images:
              - \`ghcr.io/aunghtetnay/pyonerip:pr-${{ github.event.number }}\`
              - \`aunghtetnay/pyonerip:pr-${{ github.event.number }}\`
              
              **Security Scan**: ${{ needs.security-scan.result == 'success' && 'Passed' || 'Issues Found' }}
              
              Images will be published when this PR is merged to main.`
            })

  cleanup:
    runs-on: ubuntu-latest
    needs: [build, security-scan, publish]
    if: always() && github.event_name != 'pull_request'
    
    steps:
      - name: Delete old GitHub Container Registry images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true

      - name: Clean up Docker build cache
        run: |
          echo "Cleaning up Docker build cache..."
          docker builder prune --all --force || true